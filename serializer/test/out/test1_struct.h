#pragma once
/*
Autogenerated from:
	../test1.autogen.py
*/
#include <generated_source.h>
namespace test
{
	#define GSTRUCT_TEST_TESTSTRUCT_KEY 2621617016
	struct TestStruct
	{
	public:
		using model_t = test::TestEnum;
		constexpr static uint32_t key() { return 2621617016; }
		constexpr static uint32_t member_count() { return 5; }
	public:
		ss::IntProperty mint = 1;
		ss::FloatProperty mfloat = 1.0f;
		ss::StringProperty mstring = {};
		ss::IntArrayProperty mint_array = {};
		ss::FloatArrayProperty mfloat_array = {};
	};
}
namespace _gs_detail
{
	template <> struct member_visiter <test::TestStruct, 0u> {
		inline static const auto& get(const test::TestStruct& _content) { return _content.mint; }
		inline static auto& get(test::TestStruct& _content) { return _content.mint; }
	};
	template <> struct member_visiter <test::TestStruct, 1u> {
		inline static const auto& get(const test::TestStruct& _content) { return _content.mfloat; }
		inline static auto& get(test::TestStruct& _content) { return _content.mfloat; }
	};
	template <> struct member_visiter <test::TestStruct, 2u> {
		inline static const auto& get(const test::TestStruct& _content) { return _content.mstring; }
		inline static auto& get(test::TestStruct& _content) { return _content.mstring; }
	};
	template <> struct member_visiter <test::TestStruct, 3u> {
		inline static const auto& get(const test::TestStruct& _content) { return _content.mint_array; }
		inline static auto& get(test::TestStruct& _content) { return _content.mint_array; }
	};
	template <> struct member_visiter <test::TestStruct, 4u> {
		inline static const auto& get(const test::TestStruct& _content) { return _content.mfloat_array; }
		inline static auto& get(test::TestStruct& _content) { return _content.mfloat_array; }
	};
};
