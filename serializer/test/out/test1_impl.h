/*
Autogenerated from:
	../test1.autogen.py
*/
#include "test1_decl.h"
namespace test
{
	TestEnum::Enum TestEnum::parse(const char* _name, const std::size_t nmsize)
	{
		if (_name == nullptr || nmsize <= 2)
			return TestEnum::Enum::kCount;
		if(std::strncmp(_name, "p_", 2) != 0)
			return TestEnum::Enum::kCount;
		const char* test_str = _name + 2;
		std::size_t test_size = nmsize - 2;
		uint32_t name_hash = gs::utils::simple_string_hash(test_str, test_size);
		auto test_alias = [=](const char* eref) -> bool {
			return std::strncmp(eref + 2, test_str, test_size) == 0;
		};
		switch (nmsize)
		{
			case 6:
			{
				if (name_hash == 93732948 && test_alias("p_mint"))
					return Enum::e_mint;
				break;
			}
			case 8:
			{
				if (name_hash == 2520593796 && test_alias("p_mfloat"))
					return Enum::e_mfloat;
				break;
			}
			case 9:
			{
				if (name_hash == 1688965191 && test_alias("p_mstring"))
					return Enum::e_mstring;
				break;
			}
			case 12:
			{
				if (name_hash == 1515755657 && test_alias("p_mint_array"))
					return Enum::e_mint_array;
				break;
			}
			case 14:
			{
				if (name_hash == 2321062025 && test_alias("p_mfloat_array"))
					return Enum::e_mfloat_array;
				break;
			}
			default:break;
		}
		return TestEnum::Enum::kCount;
	}
	std::string_view TestEnum::name(const TestEnum::Enum v)
	{
		switch(v)
		{
			case Enum::e_mint         : return std::string_view("p_mint", 6);
			case Enum::e_mfloat       : return std::string_view("p_mfloat", 8);
			case Enum::e_mstring      : return std::string_view("p_mstring", 9);
			case Enum::e_mint_array   : return std::string_view("p_mint_array", 12);
			case Enum::e_mfloat_array : return std::string_view("p_mfloat_array", 14);
			default:break;
		}
		return {};
	}
}
