/*
Autogenerated from:
	../test2.autogen.py
*/
#include "test2_decl.h"
namespace test_enum
{
	TestEnum2::Enum TestEnum2::parse(const char* _name, const std::size_t nmsize)
	{
		if (_name == nullptr || nmsize <= 6)
			return TestEnum2::Enum::kCount;
		if(std::strncmp(_name, "alias_", 6) != 0)
			return TestEnum2::Enum::kCount;
		const char* test_str = _name + 6;
		std::size_t test_size = nmsize - 6;
		uint32_t name_hash = gs::utils::simple_string_hash(test_str, test_size);
		auto test_alias = [=](const char* eref) -> bool {
			return std::strncmp(eref + 6, test_str, test_size) == 0;
		};
		switch (nmsize)
		{
			case 13:
			{
				if (name_hash == 1673759825 && test_alias("alias_member1"))
					return Enum::enum_member1;
				if (name_hash == 1673759826 && test_alias("alias_member2"))
					return Enum::enum_member2;
				break;
			}
			default:break;
		}
		return TestEnum2::Enum::kCount;
	}
	std::string_view TestEnum2::name(const TestEnum2::Enum v)
	{
		switch(v)
		{
			case Enum::enum_member1 : return std::string_view("alias_member1", 13);
			case Enum::enum_member2 : return std::string_view("alias_member2", 13);
			default:break;
		}
		return {};
	}
}
