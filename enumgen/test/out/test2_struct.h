#pragma once
/*
Autogenerated from:
	../test2.autogen.py
*/
#include <generated_source.h>
namespace test_struct
{
	#define GSTRUCT_TEST_STRUCT_TESTSTRUCT2_KEY 3663250048
	struct TestStruct2
	{
	public:
		using model_t = test_enum::TestEnum2;
		constexpr static uint32_t key() { return 3663250048; }
		constexpr static uint32_t member_count() { return 2; }
	public:
		int member1 = 1;
		float member2 = 2.0f;
	};
}
namespace _gs_detail
{
	template <> struct member_visiter <test_struct::TestStruct2, 0u> {
		inline static const auto& get(const test_struct::TestStruct2& _content) { return _content.member1; }
		inline static auto& get(test_struct::TestStruct2& _content) { return _content.member1; }
	};
	template <> struct member_visiter <test_struct::TestStruct2, 1u> {
		inline static const auto& get(const test_struct::TestStruct2& _content) { return _content.member2; }
		inline static auto& get(test_struct::TestStruct2& _content) { return _content.member2; }
	};
};
